#Environment Variable
Environment variable allow you to set different port numbers for different environments without changing the code.

const PORT = process.env.PORT || 3500

You can set the PORT environment variable in different environments:

Development: PORT=3000
Testing: PORT=4000
Staging: PORT=5000
Production: PORT=80

#Creating your own Server
-http is build in module for node js that provide HTTP server and client functionality
-Creating a basic HTTP server in Node.js using the http module involves using the http.createServer method. 
const server = http.createServer((req, res)=>{})
->req - contains details about the client's request such as URL, HTTP method, headers and any data sent with the request
->Properties of req
  -req.method : eg GET, POST, PUT, DELETE etc
  -req.URL : The URL of the request
  -req.headers : An object containing the request headers
  -req.body : The body of the request (typically used with POST, PUT request)
  -req.accepts() : which content type the client accepts

->res - is used to send a response back to the client. It provides methods and properties to control the response such as setting the status code, sending headers and writing the response body
->Properties of res
  res.writeHead(statusCode, headers): sets http status code and response headers.
  res.write(data):Writes data to the response body.
  res.end(data): Ends the response and optionally writes some data to the response body.

  ->HTTP headers
  They provide essential information about the request or response such as the type of content being sent, the server details, authentication information and more
  -These headers are sent by the cient to the server
    -Accept - types of content the client can accept eg 'Accept:text/html, application/json'
    -Authorization - Contains credentials for authenticating the client with the server
    eg 'Authorization: Basic nbfjhgfkjfkjbevhjdf'
    -Content-Type - Indicates the media type of the body of the request
    eg 'Content-Type:application/json'
    -User-Agent - Identifies the client software making the request
    eg 'User-Agent -  Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    -Cookie = Sends stored cookies to the server
    eg 'Cookie: sessionId=abc123'
    -Referer - Indicates the URL of the resource from which the request was initiated.
    eg 'Referer: https://www.example.com'
-These headers are sent by the server back to the client:
    -Content-Type - Indicates the media type of the body of the response
    eg 'Content-Type:text/html'
    -Content-Length - The length of the response body in bytes.
    eg 'Content-Length: 1234'
    -Set-Cookie - Sends cookies from te servr to the client
    eg 'Set-Cookie: sessionId=abc123; HttpOnly'
    -Server - Identifies the server software  handling the request
    eg 'Server: Apache/2.4.41 (Ubuntu)'
    -Cache-Control - Directives for caching mechanisms.
    eg 'Cache-Control: no-cache, no-store, must-revalidate'

JSON.parse()
This method can be useful when you receive JSON data from a web server and need to convert it into a javascript object.

JSON.stringify()
converts a javascript object or value to a JSON string which can be useful for sending data to a server or storing it in a format that can be easily read and processed.

MIME - Multipurpose Internet Mail Extension
defines the nature and format of a document, file

const mimeTypes = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.txt': 'text/plain'
};
This ensures your server can correctly serve a wide variety of file types with the appropriate Content-Type header.

path.extname()
used to get extension of a file path.
eg console.log(path.extname('index.html'));
-> .html

fs.access(filepath)
is used to check the accessibility of a file or directory.
used to verift whether a file exist and whether process has permission to read, write or execute the file

contentType.includes('image)
contentType.includes('image) checks if the string 'image is present anywhere within contentType

#Event
events generated by user interactions, system notifications or change in state and are handle by the program

Triggering action - an event is typically triggered by some actions such as user clicking button, a file finishing downloads.

Event Sources - The entity that generates or emits the events is known as event source. In graphical interface this might be a button, input field or window. In node js application it could be a network request completing or a timer firing

Event Listener: An event listener or handler is a function that is executed in response to an event

Event Emitter: The component responsible for emitting events is called an event emitter. It triggers events and notifies any registered event listeners.

eventemitter.on('message' ...)
registers an event handler function(it is function that is executed in response to an event being triggered or emitted, responsible for defining what actions should be taken when the event occur) that logs a receives message when the 'message' event is emitted.

eventemitter.emit('message', ...)
emits the message event triggering the execution of the registered event handler